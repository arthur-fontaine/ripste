#!/usr/bin/env node --experimental-strip-types

/**
 * Script de d√©monstration pour tester le service d'email
 *
 * Usage:
 * RESEND_API_KEY=your_key node scripts/test-email.ts
 */

import { ResendEmailService } from "../src/services/email/resend-email.service.ts";

async function main() {
	const apiKey = process.env["RESEND_API_KEY"];
	const testEmail = process.env["TEST_EMAIL"] || "test@example.com";

	if (!apiKey) {
		console.error("‚ùå RESEND_API_KEY environment variable is required");
		console.error(
			"Usage: RESEND_API_KEY=your_key TEST_EMAIL=your@email.com node scripts/test-email.ts",
		);
		process.exit(1);
	}

	const emailService = new ResendEmailService({
		apiKey,
		fromEmail: "test@example.com", // Remplacez par votre domaine v√©rifi√©
		fromName: "Test Ripste",
	});

	console.log("üöÄ Test du service d'email avec Resend");
	console.log(`üìß Email de test: ${testEmail}`);
	console.log("");

	try {
		// Test 1: Email de confirmation d'inscription
		console.log("1Ô∏è‚É£ Test de l'email de confirmation d'inscription...");
		await emailService.sendRegistrationConfirmation({
			userEmail: testEmail,
			userName: "Utilisateur Test",
			confirmationUrl: "https://example.com/verify?token=test123",
		});
		console.log("‚úÖ Email de confirmation envoy√© avec succ√®s");
		console.log("");

		// Test 2: Email d'acceptation
		console.log("2Ô∏è‚É£ Test de l'email d'acceptation...");
		await emailService.sendPlatformAcceptance({
			userEmail: testEmail,
			userName: "Utilisateur Test",
			loginUrl: "https://example.com/login",
		});
		console.log("‚úÖ Email d'acceptation envoy√© avec succ√®s");
		console.log("");

		// Test 3: Email de refus
		console.log("3Ô∏è‚É£ Test de l'email de refus...");
		await emailService.sendPlatformRejection({
			userEmail: testEmail,
			userName: "Utilisateur Test",
			reason: "Documents incomplets pour la v√©rification",
			supportEmail: "support@example.com",
		});
		console.log("‚úÖ Email de refus envoy√© avec succ√®s");
		console.log("");

		// Test 4: Email personnalis√©
		console.log("4Ô∏è‚É£ Test de l'email personnalis√©...");
		await emailService.sendCustomEmail({
			to: testEmail,
			subject: "Email de test personnalis√©",
			htmlContent: `
				<h1>Test r√©ussi !</h1>
				<p>Ce message confirme que le service d'email fonctionne correctement.</p>
				<p>Tous les types d'emails ont √©t√© envoy√©s avec succ√®s.</p>
			`,
			textContent:
				"Test r√©ussi ! Ce message confirme que le service d'email fonctionne correctement.",
		});
		console.log("‚úÖ Email personnalis√© envoy√© avec succ√®s");
		console.log("");

		console.log("üéâ Tous les tests d'email ont √©t√© ex√©cut√©s avec succ√®s !");
		console.log(`üì¨ V√©rifiez votre bo√Æte mail: ${testEmail}`);
	} catch (error) {
		console.error("‚ùå Erreur lors de l'envoi des emails:", error);
		process.exit(1);
	}
}

main().catch(console.error);
